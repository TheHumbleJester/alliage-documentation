import { ChildProcess } from "child_process";
import getPort from "get-port";
import axios from "axios";

import { Sandbox } from "alliage-sandbox";

describe("Main scenario", () => {
  // We create the sandbox by providing it the path
  // of the test scenario
  const sandbox = new Sandbox({
    scenarioPath: __dirname,
  });

  let webserverPort: number;
  let countryApiPort: number;
  let wikipediaApiPort: number;

  let childProcess: ChildProcess;

  beforeAll(async () => {
    // Before doing anything we must initialize the sandbox
    // This will create the blank Alliage project
    await sandbox.init();

    // We make the sandbox run the "alliage:build" script to
    // compile the code
    await sandbox
      .build(["--env=development", "--use-typescript"])
      .waitCompletion();

    // Getting random available ports for the webserver
    // and the fake country API and wikipedia API
    webserverPort = await getPort();
    countryApiPort = await getPort();
    wikipediaApiPort = await getPort();

    // We make the sandbox run the "alliage:run main" script
    // while overriding the project default configuration through the
    // definition of env variables
    // We get in return a ChildProcess instance
    ({ process: childProcess } = sandbox.run(["main"], {
      env: {
        WEBSERVER_PORT: webserverPort.toString(),
        COUNTRY_API_URL: `http://localhost:${countryApiPort}`,
        COUNTRY_API_KEY: "country_api_key",
        WIKIPEDIA_API_URL: `http://localhost:${wikipediaApiPort}`,
      },
    }));

    // We wait for our process to output the port which is the sign
    // we can start make requests on it
    await new Promise((resolve) =>
      childProcess.stdout!.on("data", (data) => {
        if (data === `Listening on: ${webserverPort}\n`) {
          resolve();
        }
      })
    );
  }, 10000);

  afterAll(async () => {
    // Once all the tests are over, we kill the process
    // and clear the sandbox
    childProcess.kill("SIGINT");
    await sandbox.clear();
  });

  describe("GET /", () => {
    it('should respond "Hello world" !', async () => {
      // We just make a simple request on our webserver
      const res = await axios.get(`http://localhost:${webserverPort}`);

      // and check that it actually return a success response with the
      // content "Hello world !"
      expect(res.status).toEqual(200);
      expect(res.data).toEqual("Hello world !");
    });
  });
});